{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f3bb1ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useState, useEffect } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\nconst { SystemProgram, Keypair } = web3;\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts = { preflightCommitment: \"processed\" }\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n    \"https://media0.giphy.com/media/8Ry7iAVwKBQpG/giphy.gif?cid=790b7611c70b9daec1b68f9bea6cd3b31edd11c5746205ff&rid=giphy.gif&ct=g\",\n    \"https://media4.giphy.com/media/l0IyoieFSfr2Xcbza/giphy.gif?cid=790b7611acaab7817498156fcf8e4e0bd289d4fe159a173e&rid=giphy.gif&ct=g\",\n    \"https://media3.giphy.com/media/7eAvzJ0SBBzHy/giphy.gif?cid=790b7611b3857dedc98435f1194d4acd4caeb2efd0a5ab7f&rid=giphy.gif&ct=g\",\n  ];\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState(null);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n\tif (inputValue.length === 0) {\n\t  console.log(\"No gif link given!\")\n\t  return\n\t}\n\tconsole.log('Gif link:', inputValue);\n\ttry {\n\t  setInputValue(\"\");\n\t  const provider = getProvider();\n\t  const program = new Program(idl, programID, provider);\n  \n\t  await program.rpc.addGif(inputValue, {\n\t\taccounts: {\n\t\t  baseAccount: baseAccount.publicKey,\n\t\t  user: provider.wallet.publicKey,\n\t\t},\n\t  });\n\t  console.log(\"GIF sucesfully sent to program\", inputValue)\n  \n\t  await getGifList();\n\t} catch (error) {\n\t  console.log(\"Error sending GIF:\", error)\n\t}\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n\tconst connection = new Connection(network, opts.preflightCommitment);\n\tconst provider = new Provider(\n\t  connection, window.solana, opts.preflightCommitment,\n\t);\n\t  return provider;\n  }\n\n  const createGifAccount = async () => {\n\ttry {\n\t  const provider = getProvider();\n\t  const program = new Program(idl, programID, provider);\n\t  console.log(\"ping\")\n\t  await program.rpc.startStuffOff({\n\t\taccounts: {\n\t\t  baseAccount: baseAccount.publicKey,\n\t\t  user: provider.wallet.publicKey,\n\t\t  systemProgram: SystemProgram.programId,\n\t\t},\n\t\tsigners: [baseAccount]\n\t  });\n\t  console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n\t  await getGifList();\n  \n\t} catch(error) {\n\t  console.log(\"Error creating BaseAccount account:\", error)\n\t}\n  }\n\n  const renderConnectedContainer = () => {\n  if (gifList === null) {\n    return (\n      <div className=\"connected-container\">\n        <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n          Do One-Time Initialization For GIF Program Account\n        </button>\n      </div>\n    )\n  } \n\t// Otherwise, we're good! Account exists. User can submit GIFs.\n\telse {\n    return(\n      <div className=\"connected-container\">\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            sendGif();\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">\n            Submit\n          </button>\n        </form>\n        <div className=\"gif-grid\">\n\t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} alt={item.gifLink}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n\tconst getGifList = async () => {\n\t\ttry {\n\t\t\tconst provider = getProvider();\n\t\t\tconst program = new Program(idl, programID, provider);\n\t\t\tconst account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\t\t\tconsole.log(\"got the account\", account);\n\t\t\tsetGifList(account.gifList);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tsetGifList(null)\n\t\t}\n\t}\n\n  useEffect(() => {\n\tconst onLoad = async () => {\n\t  await checkIfWalletIsConnected();\n\t};\n\twindow.addEventListener('load', onLoad);\n\treturn () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n\tif (walletAddress) {\n\t  console.log('Fetching GIF list...');\n\t  \n\t  // Call Solana program here.\n  \n\t  // Set state\n\t  getGifList()\n\t}\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress\n            ? renderNotConnectedContainer()\n            : renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}